// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Node = exports.Node = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Entry = exports.Entry = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Log = exports.Log = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Handshake = exports.Handshake = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineNode()
defineEntry()
defineLog()
defineHandshake()

function defineNode () {
  Node.encodingLength = encodingLength
  Node.encode = encode
  Node.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.change)) throw new Error("change is required")
    var len = encodings.varint.encodingLength(obj.change)
    length += 1 + len
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.log)) throw new Error("log is required")
    var len = encodings.string.encodingLength(obj.log)
    length += 1 + len
    if (defined(obj.seq)) {
      var len = encodings.varint.encodingLength(obj.seq)
      length += 1 + len
    }
    if (defined(obj.identity)) {
      var len = encodings.bytes.encodingLength(obj.identity)
      length += 1 + len
    }
    if (defined(obj.signature)) {
      var len = encodings.bytes.encodingLength(obj.signature)
      length += 1 + len
    }
    if (!defined(obj.value)) throw new Error("value is required")
    var len = encodings.bytes.encodingLength(obj.value)
    length += 1 + len
    if (defined(obj.links)) {
      for (var i = 0; i < obj.links.length; i++) {
        if (!defined(obj.links[i])) continue
        var len = encodings.string.encodingLength(obj.links[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.change)) throw new Error("change is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.change, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 18
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.log)) throw new Error("log is required")
    buf[offset++] = 26
    encodings.string.encode(obj.log, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.seq)) {
      buf[offset++] = 32
      encodings.varint.encode(obj.seq, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.identity)) {
      buf[offset++] = 58
      encodings.bytes.encode(obj.identity, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.signature)) {
      buf[offset++] = 66
      encodings.bytes.encode(obj.signature, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (!defined(obj.value)) throw new Error("value is required")
    buf[offset++] = 42
    encodings.bytes.encode(obj.value, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (defined(obj.links)) {
      for (var i = 0; i < obj.links.length; i++) {
        if (!defined(obj.links[i])) continue
        buf[offset++] = 50
        encodings.string.encode(obj.links[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      change: 0,
      key: "",
      log: "",
      seq: 0,
      identity: null,
      signature: null,
      value: null,
      links: []
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found6 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found6) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.change = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.log = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found2 = true
        break
        case 4:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 7:
        obj.identity = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 8:
        obj.signature = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 5:
        obj.value = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found6 = true
        break
        case 6:
        obj.links.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineEntry () {
  Entry.encodingLength = encodingLength
  Entry.encode = encode
  Entry.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.change)) throw new Error("change is required")
    var len = encodings.varint.encodingLength(obj.change)
    length += 1 + len
    if (!defined(obj.node)) throw new Error("node is required")
    var len = encodings.string.encodingLength(obj.node)
    length += 1 + len
    if (defined(obj.links)) {
      for (var i = 0; i < obj.links.length; i++) {
        if (!defined(obj.links[i])) continue
        var len = encodings.string.encodingLength(obj.links[i])
        length += 1 + len
      }
    }
    if (defined(obj.log)) {
      var len = encodings.string.encodingLength(obj.log)
      length += 1 + len
    }
    if (defined(obj.seq)) {
      var len = encodings.varint.encodingLength(obj.seq)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.change)) throw new Error("change is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.change, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.node)) throw new Error("node is required")
    buf[offset++] = 18
    encodings.string.encode(obj.node, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.links)) {
      for (var i = 0; i < obj.links.length; i++) {
        if (!defined(obj.links[i])) continue
        buf[offset++] = 26
        encodings.string.encode(obj.links[i], buf, offset)
        offset += encodings.string.encode.bytes
      }
    }
    if (defined(obj.log)) {
      buf[offset++] = 34
      encodings.string.encode(obj.log, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.seq)) {
      buf[offset++] = 40
      encodings.varint.encode(obj.seq, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      change: 0,
      node: "",
      links: [],
      log: "",
      seq: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.change = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.node = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.links.push(encodings.string.decode(buf, offset))
        offset += encodings.string.decode.bytes
        break
        case 4:
        obj.log = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 5:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineLog () {
  Log.encodingLength = encodingLength
  Log.encode = encode
  Log.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.log)) throw new Error("log is required")
    var len = encodings.string.encodingLength(obj.log)
    length += 1 + len
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.log)) throw new Error("log is required")
    buf[offset++] = 10
    encodings.string.encode(obj.log, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      log: "",
      seq: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.log = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHandshake () {
  Handshake.encodingLength = encodingLength
  Handshake.encode = encode
  Handshake.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.version)) throw new Error("version is required")
    var len = encodings.varint.encodingLength(obj.version)
    length += 1 + len
    if (defined(obj.mode)) {
      var len = encodings.string.encodingLength(obj.mode)
      length += 1 + len
    }
    if (defined(obj.metadata)) {
      var len = encodings.bytes.encodingLength(obj.metadata)
      length += 1 + len
    }
    if (defined(obj.live)) {
      var len = encodings.bool.encodingLength(obj.live)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.version)) throw new Error("version is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.version, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.mode)) {
      buf[offset++] = 18
      encodings.string.encode(obj.mode, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.metadata)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.metadata, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.live)) {
      buf[offset++] = 32
      encodings.bool.encode(obj.live, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      version: 0,
      mode: "sync",
      metadata: null,
      live: false
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.version = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.mode = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.metadata = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 4:
        obj.live = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
